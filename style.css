
let currentPlayer = 'X';
let gameBoard = ['', '', '', '', '', '', '', '', ''];
let gameActive = true;
let aiMode = true; 

function handleCellClick(index) {
    if (gameBoard[index] === '' && gameActive) {
        gameBoard[index] = currentPlayer;
        updateBoard();
        checkWinner();


        togglePlayer();

      
        if (aiMode && currentPlayer === 'O' && gameActive) {
            const aiMove = getBestMove();
            gameBoard[aiMove] = currentPlayer;
            updateBoard();
            checkWinner();
            togglePlayer();
        }
    }
}

function updateBoard() {
    const cells = document.querySelectorAll('.cell');
    cells.forEach((cell, index) => {
        cell.textContent = gameBoard[index];
    });
}

function togglePlayer() {
    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
}

function toggleGameMode() {
    aiMode = !aiMode;
    resetGame();
}

function checkWinner() {
    const winPatterns = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 3, 6], [1, 4, 7], [2, 5, 8],
        [0, 4, 8], [2, 4, 6]
    ];

    for (const pattern of winPatterns) {
        const [a, b, c] = pattern;
        if (gameBoard[a] && gameBoard[a] === gameBoard[b] && gameBoard[a] === gameBoard[c]) {
            displayWinner(gameBoard[a]);
            gameActive = false;
            return;
        }
    }

    if (!gameBoard.includes('')) {
        displayDraw();
        gameActive = false;
    }
}

function displayWinner(winner) {
    document.getElementById('message').textContent = `Player ${winner} wins!`;
}

function displayDraw() {
    document.getElementById('message').textContent = "It's a draw!";
}

function resetGame() {
    currentPlayer = 'X';
    gameBoard = ['', '', '', '', '', '', '', '', ''];
    gameActive = true;
    document.getElementById('message').textContent = '';
    updateBoard();
}

function getBestMove() {
    let bestScore = Infinity;
    let bestMove;

    for (let i = 0; i < gameBoard.length; i++) {
        if (gameBoard[i] === '') {
            gameBoard[i] = currentPlayer;
            let score = minimax(gameBoard, 0, false);
            gameBoard[i] = ''; // Undo the move

            if (score < bestScore) {
                bestScore = score;
                bestMove = i;
            }
        }
    }

    return bestMove;
}

function minimax(board, depth, isMaximizing) {
    let result = checkWinner();
    if (result !== null) {
        return result === 'O' ? 1 : -1;
    }

    if (!board.includes('')) {
        return 0; // It's a draw
    }

    if (isMaximizing) {
        let bestScore = -Infinity;
        for (let i = 0; i < board.length; i++) {
            if (board[i] === '') {
                board[i] = 'O';
                let score = minimax(board, depth + 1, false);
                board[i] = ''; 
                bestScore = Math.max(score, bestScore);
            }
        }
        return bestScore;
    } else {
        let bestScore = Infinity;
        for (let i = 0; i < board.length; i++) {
            if (board[i] === '') {
                board[i] = 'X';
                let score = minimax(board, depth + 1, true);
                board[i] = '';  
                bestScore = Math.min(score, bestScore);
            }
        }
        return bestScore;
    }
}
